class MyCircularQueue {
    int limit,len;
    LinkedList<Integer> queue;
    public MyCircularQueue(int k) {
        limit=k;
        len=0;
        queue=new LinkedList<>();
    }
    public boolean enQueue(int value) {
        if(len==limit){
            return false;
        }
        queue.add(value);
        len++;
        return true;
    }
    public boolean deQueue() {
        if(len==0) return false;
        queue.poll();
        len--;
        return true;
    }
    public int Front() {
        if(len==0){
            return -1;
        }
        return queue.peek();
    }
    public int Rear() {
        if(len==0){
            return -1;
        }
        return queue.getLast();
    }
    public boolean isEmpty() {
        return len==0;
    }
    public boolean isFull() {
        return len==limit;
    }
}

/**
 * Your MyCircularQueue object will be instantiated and called as such:
 * MyCircularQueue obj = new MyCircularQueue(k);
 * boolean param_1 = obj.enQueue(value);
 * boolean param_2 = obj.deQueue();
 * int param_3 = obj.Front();
 * int param_4 = obj.Rear();
 * boolean param_5 = obj.isEmpty();
 * boolean param_6 = obj.isFull();
 */