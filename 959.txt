为了找到图中连通块的数量，我们可以使用深度优先搜索或者并查集算法。问题的难点在于如何识别出整张图。
一个“暴力”的识图方法是将每个正方形网格看成四个顶点（东、南、西、北），表示存在两条斜杠时，正方形网格被划分成的四个三角形。
然后，将四个顶点连接如果正方形网格是 " "，两两连接如果网格是 "/" 或者 "\"。
最终，我们可以连接所有相邻的顶点（例如，正方形网格 grid[0][0] 的东节点和 grid[0][1] 的西节点相连）。
算法
创建 4*N*N 个顶点，每个代表一个三角形，按照如上的方式连接它们。然后，使用并查集算法找到连通块的总数。
class Solution {
    public int regionsBySlashes(String[] grid) {
        int N = grid.length;
        DSU dsu = new DSU(4 * N * N);
        for (int r = 0; r < N; ++r)
            for (int c = 0; c < N; ++c) {
                int root = 4 * (r * N + c);
                char val = grid[r].charAt(c);
                if (val != '\\') {
                    dsu.union(root + 0, root + 1);
                    dsu.union(root + 2, root + 3);
                }
                if (val != '/') {
                    dsu.union(root + 0, root + 2);
                    dsu.union(root + 1, root + 3);
                }
                // north south
                if (r + 1 < N)
                    dsu.union(root + 3, (root + 4 * N) + 0);
                if (r - 1 >= 0)
                    dsu.union(root + 0, (root - 4 * N) + 3);
                // east west
                if (c + 1 < N)
                    dsu.union(root + 2, (root + 4) + 1);
                if (c - 1 >= 0)
                    dsu.union(root + 1, (root - 4) + 2);
            }
        int ans = 0;
        for (int x = 0; x < 4 * N * N; ++x) {
            if (dsu.find(x) == x)
                ans++;
        }
        return ans;
    }
}
class DSU {
    int[] parent;
    public DSU(int N) {
        parent = new int[N];
        for (int i = 0; i < N; ++i)
            parent[i] = i;
    }
    public int find(int x) {
        if (parent[x] != x) parent[x] = find(parent[x]);
        return parent[x];
    }
    public void union(int x, int y) {
        parent[find(x)] = find(y);
    }
}