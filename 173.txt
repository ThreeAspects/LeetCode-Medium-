/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class BSTIterator {
    Stack<TreeNode> stack=new Stack<>();
    public BSTIterator(TreeNode root) {        
        TreeNode cur=root;
        while(cur!=null){
            stack.push(cur);
            cur=cur.left;
        } 
    }
    /** @return the next smallest number */
    public int next() {
        TreeNode temp=stack.pop();
        int re=temp.val;
        temp=temp.right;
        while(temp!=null){
            stack.push(temp);
            temp=temp.left;
        }
        return re;
    }
    
    /** @return whether we have a next smallest number */
    public boolean hasNext() {
        if(stack.isEmpty()){
            return false;
        }else{
            return true;
        }
    }
}

/**
 * Your BSTIterator object will be instantiated and called as such:
 * BSTIterator obj = new BSTIterator(root);
 * int param_1 = obj.next();
 * boolean param_2 = obj.hasNext();
 */