算法
我们令左分支有 LL 个节点。我们知道左分支的头节点为 pre[1]，但它也出现在左分支的后序表示的最后。
所以pre[1]=post[L-1]（因为结点的值具有唯一性），因此L=post.indexOf(pre[1])+1。
现在在我们的递归步骤中，左分支由pre[1:L+1]和post[0:L]重新分支，而右分支将由pre[L+1:N]和post[L:N-1]重新分支。
class Solution {
    public TreeNode constructFromPrePost(int[] pre, int[] post) {
        int N = pre.length;
        if (N == 0) return null;
        TreeNode root = new TreeNode(pre[0]);
        if (N == 1) return root;
        int L = 0;
        for(int i=0;i<N;++i)
            if(post[i]==pre[1])
                L=i+1;
        root.left = constructFromPrePost(Arrays.copyOfRange(pre, 1, L+1),Arrays.copyOfRange(post, 0, L));
        root.right = constructFromPrePost(Arrays.copyOfRange(pre, L+1, N),Arrays.copyOfRange(post, L, N-1));
        return root;
    }
}