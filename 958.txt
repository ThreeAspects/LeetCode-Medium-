/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean isCompleteTree(TreeNode root) {
        int depth=len(root),d=1;
        Queue<TreeNode> queue=new LinkedList<>();
        queue.offer(root);
        while(d<=depth-1){
            int size=queue.size();
            while(size>0){
                TreeNode node=queue.poll();
                if(d<depth-1&&(node.left==null||node.right==null)){
                    return false;
                }
                if(node.left==null&&node.right!=null){
                    return false;
                }
                    queue.offer(node.left);
                    queue.offer(node.right);
                size--;
            }
            d++;
        }
        boolean flag=false;
        System.out.println(queue.size());
        while(queue.size()>1){
            TreeNode node=queue.poll();
            if(!flag&&node==null){
                flag=true;
            }else if(flag&&node!=null){
                return false;
            }
        }
        return true;
    }
    public int len(TreeNode root){
        if(root==null){
            return 0;
        }
        return 1+Math.max(len(root.left),len(root.right));
    }
}