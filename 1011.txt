定义函数canShip(D, K),来判断在最低承载力为K的情形下能否在D天内送达所有包裹。我们所要做的就是按照传送带上货物的顺序，
依次且尽可能多地往船上装载货物，当该艘船无法装下更多货物时，我们换一搜船，同时将天数加1。当运输完所有货物后，我们判断所用的天数是否小于等于D。
用二分查找的方式，来查找这个最低承载力，如果mid可以完成任务，我们把查找范围缩减至[lo,mid]
（注意不是mid+1,因为mid可能是我们所求的解），否则我们去[mid+1, hi]区间中继续查找，详情见代码。
class Solution {
    public int shipWithinDays(int[] weights, int D) {
        int lo = 0, hi = Integer.MAX_VALUE;
        while (lo < hi) {
        	int mid = lo + (hi - lo) / 2;
        	if (canShip(weights, D, mid)) {
        		hi = mid;
        	} else {
        		lo = mid+1;
        	}
        }
        return lo;
    }
    private boolean canShip(int[] weights, int D, int K) {
    	int cur = K; // cur 表示当前船的可用承载量
    	for (int weight: weights) {
    		if (weight > K) return false;
    		if (cur < weight) {
    			cur = K;
    			D--;
    		}
    		cur -= weight;
    	}
    	return D > 0; // 能否在D天内运完
    }
}