/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    Map<Integer,Integer> map=new HashMap<>();
    public int[] findFrequentTreeSum(TreeNode root) {
        f(root);
        LinkedList<Integer> list=new LinkedList<>();
        int max=Integer.MIN_VALUE;
        for(int i:map.keySet()){
            if(map.get(i)>max){
                list.clear();
                max=map.get(i);
                list.add(i);
            }else if(map.get(i)==max){
                list.add(i);
            }
        }
        int[] re=new int[list.size()];
        for(int i=0;i<list.size();i++){
            re[i]=list.get(i);
        }
        return re;
    }
    public int f(TreeNode root){
        if(root==null) return 0;
        int left=f(root.left);
        int sum=root.val+left;
        sum+=f(root.right); 
        map.put(sum,map.getOrDefault(sum,0)+1);
        return sum;
    }
}