class Solution {
    public int shortestPathBinaryMatrix(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int[][] note = new int[m][n];
        Queue<Integer> queue = new LinkedList<>();
        if (grid[0][0] == 1)
            return -1;
        else
            queue.offer(0);
        note[0][0] = 1;
        int[][] direction = new int[][]{{-1, -1},{-1, 0}, {-1,1},{0, -1}, {0, 1}, {1, -1}, {1, 0}, {1, 1}};
        int x = 0;
        int y = 0;
        int nx = 0;
        int ny = 0;
        while (!queue.isEmpty()){
            x = queue.peek()/n;
            y = queue.poll()%n;
            if (x == m-1 && y == n-1)
                return note[x][y];
            for (int i = 0; i < direction.length; i++){
                nx = x + direction[i][0];
                ny = y + direction[i][1];
                if (nx >= 0 && nx < m && ny >= 0 && ny < n && grid[nx][ny] == 0 && note[nx][ny] == 0){
                    note[nx][ny] = note[x][y] + 1;
                    queue.offer(n*nx + ny);
                }
            }
        }
        return -1;
    }
}