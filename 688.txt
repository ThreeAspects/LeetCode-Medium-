class Solution {
    double[][][] dp;
	public double knightProbability(int N, int K, int r, int c){
		if(K == 0) return 1.0d;
		dp = new double[N][N][K + 1];
		return dfs(N, K, r, c);
	}
	public double dfs(int N, int K, int r, int c) {
		if(dp[r][c][K] - 0.0d > 0.000001d) return dp[r][c][K];
		if(K == 1) {
			int count = 0;
			if(r + 2  < N  && c + 1 < N)	count++;
			if(r + 2  < N  && c - 1 >= 0)	count++;
			if(r - 2  >= 0 && c + 1 < N)	count++;
			if(r - 2  >= 0 && c - 1 >= 0)	count++;
			if(c + 2  < N  && r + 1 < N)	count++;
			if(c + 2  < N  && r - 1 >= 0)	count++;
			if(c - 2  >= 0 && r + 1 < N)	count++;
			if(c - 2  >= 0 && r - 1 >= 0)	count++;
			return ((double)count) / 8.0d;
		}else {
			double res = 0.0d;
			if(r + 2  < N  && c + 1 < N)    res = res + dfs(N, K - 1, r + 2, c + 1);
			if(r + 2  < N  && c - 1 >= 0)   res = res + dfs(N, K - 1, r + 2, c - 1);
			if(r - 2  >= 0 && c + 1 < N)    res = res + dfs(N, K - 1, r - 2, c + 1);
			if(r - 2  >= 0 && c - 1 >= 0)   res = res + dfs(N, K - 1, r - 2, c - 1);
			if(c + 2  < N  && r + 1 < N)    res = res + dfs(N, K - 1, r + 1, c + 2);
			if(c + 2  < N  && r - 1 >= 0)   res = res + dfs(N, K - 1, r - 1, c + 2);
			if(c - 2  >= 0 && r + 1 < N)    res = res + dfs(N, K - 1, r + 1, c - 2);
			if(c - 2  >= 0 && r - 1 >= 0)   res = res + dfs(N, K - 1, r - 1, c - 2);
			return dp[r][c][K] = res / 8.0d;
		}
	}
}