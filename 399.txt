class Solution {
    public double[] calcEquation(List<List<String>> equations,double[] values,List<List<String>> queries) {
        Map<String, String> graph = new HashMap<>(); //Union-Find的字符串表示
        Map<String, Double> ratio = new HashMap<>();
        for (int i = 0; i < equations.size(); i++) { //把能union先union起来, 顺带计算比例
            union(graph, ratio, equations.get(i).get(0), equations.get(i).get(1), values[i]);
        }
        double[] res = new double[queries.size()];
        for (int i = 0; i < queries.size(); i++) {
            String s1 = queries.get(i).get(0), s2 = queries.get(i).get(1);
            if (!graph.containsKey(s1) || !graph.containsKey(s2) || !find(graph, ratio, s1).equals(find(graph, ratio, s2))) {
                res[i] = -1.0d;
            } else {
                res[i] = ratio.get(s1)/ratio.get(s2);
            }
        }
        return res;
    }
    private void union(Map<String, String> graph, Map<String, Double> ratio, String s1, String s2, double value) {
        if (!graph.containsKey(s1)) {// 初始化
            graph.put(s1, s1);
            ratio.put(s1, 1.0d);
        }
        if (!graph.containsKey(s2)) {// 初始化
            graph.put(s2, s2);
            ratio.put(s2, 1.0d);
        }
        String p1 = find(graph, ratio, s1);
        String p2 = find(graph, ratio, s2);
        graph.put(p1, p2);
        ratio.put(p1, value * ratio.get(s2) / ratio.get(s1)); // 这个有点绕,举个例子去看
    }
    private String find(Map<String, String> graph, Map<String, Double> ratio, String str) {
        if (!str.equals(graph.get(str))){
            String parent = graph.get(str);
            String ancestor = find(graph, ratio, parent);// 典型的uf的路径压缩,只不过写法在字符串为节点的表示中略微繁琐.
            graph.put(str, ancestor);
            ratio.put(str, ratio.get(str)*ratio.get(parent)); //记得更新ratio
        }
        return graph.get(str);
    }
}