class MyCircularDeque {
    int limit,len;
    LinkedList<Integer> queue;
    public MyCircularDeque(int k) {
        limit=k;
        len=0;
        queue=new LinkedList<>();
    }
    public boolean insertFront(int value) {
        if(len==limit) return false;
        len++;
        queue.addFirst(value);
        return true;   
    }
    public boolean insertLast(int value) {
        if(len==limit) return false;
        len++;
        queue.addLast(value);
        return true;
    }
    public boolean deleteFront() {
        if(len==0) return false;
        len--;
        queue.removeFirst();
        return true;
    }
    public boolean deleteLast() {
        if(len==0) return false;
        len--;
        queue.removeLast();
        return true;
    }
    public int getFront() {
        if(len==0) return -1;
        return queue.getFirst();
    }
    public int getRear() {
        if(len==0) return -1;
        return queue.getLast();
    }
    
    /** Checks whether the circular deque is empty or not. */
    public boolean isEmpty() {
        return len==0;
    }
    
    /** Checks whether the circular deque is full or not. */
    public boolean isFull() {
        return len==limit;
    }
}

/**
 * Your MyCircularDeque object will be instantiated and called as such:
 * MyCircularDeque obj = new MyCircularDeque(k);
 * boolean param_1 = obj.insertFront(value);
 * boolean param_2 = obj.insertLast(value);
 * boolean param_3 = obj.deleteFront();
 * boolean param_4 = obj.deleteLast();
 * int param_5 = obj.getFront();
 * int param_6 = obj.getRear();
 * boolean param_7 = obj.isEmpty();
 * boolean param_8 = obj.isFull();
 */