方法 2：计算受力
想法
我们可以对每个多米诺骨牌计算净受力。我们关心的受力取决于一个多米诺骨牌和最近的左侧 'R' 右侧 'L' 的距离：哪边近，就受哪边力更多。
算法
从左向右扫描，我们的力每轮迭代减少 1.重置为 N 当我们遇到一个 'R' 时，所以 force[i] 比 force[j] 大当且仅当 dominoes[i] 比 dominoes[j] 离最左边的 'R' 近。
类似的，从右向左搜啊秒，可以找到向左侧的力，离 L 的远近。
对于骨牌的结果 answer[i]，如果左右两侧力相等，答案是 '.'。否则，哪边力大答案就是哪边。
样例
下面是对字符串 S = 'R.R...L' 的模拟：我们从左向右暴力得到的结果为 [7, 6, 7, 6, 5, 4, 0]，从右向左扫描的结果为 [0, 0, 0, -4, -5, -6, -7]。
合并之后，合力为 [7, 6, 7, 2, 0, -2, -7] 所以最近结果为 RRRR.LL。
class Solution {
    public String pushDominoes(String S) {
        char[] A = S.toCharArray();
        int N = A.length;
        int[] forces = new int[N];
        // Populate forces going from left to right
        int force = 0;
        for (int i = 0; i < N; ++i) {
            if (A[i] == 'R') force = N;
            else if (A[i] == 'L') force = 0;
            else force = Math.max(force - 1, 0);
            forces[i] += force;
        }
        // Populate forces going from right to left
        force = 0;
        for (int i = N-1; i >= 0; --i) {
            if (A[i] == 'L') force = N;
            else if (A[i] == 'R') force = 0;
            else force = Math.max(force - 1, 0);
            forces[i] -= force;
        }
        StringBuilder ans = new StringBuilder();
        for (int f: forces)
            ans.append(f > 0 ? 'R' : f < 0 ? 'L' : '.');
        return ans.toString();
    }
}
