public class Solution {
    public boolean wordBreak(String s, List<String> wordDict) {
        Set<String> wordDictSet=new HashSet(wordDict);
        Queue<Integer> queue = new LinkedList<>();
        int[] visited = new int[s.length()];
        queue.add(0);
        while (!queue.isEmpty()) {
            int start = queue.remove();
            if (visited[start] == 0) {
                for (int end = start + 1; end <= s.length(); end++) {
                    if (wordDictSet.contains(s.substring(start, end))) {
                        queue.add(end);
                        if (end == s.length()) {
                            return true;
                        }
                    }
                }
                visited[start] = 1;
            }
        }
        return false;
    }
}

这个方法的想法是对于给定的字符串（s）可以被拆分成子问题 s1和 s2。如果这些子问题都可以独立地被拆分成符合要求的子问题，那么整个问题 s 也可以满足。
也就是，如果 "catsanddog" 可以拆分成两个子字符串 "catsand" 和 "dog" 。子问题 "catsand" 可以进一步拆分成 "cats" 和 "and" ，
这两个独立的部分都是字典的一部分，所以 "catsand" 满足题意条件，再往前， "catsand" 和 "dog" 也分别满足条件，所以整个字符串 "catsanddog" 也满足条件。
现在，我们考虑 dp 数组求解的过程。我们使用 n+1大小数组的 dp ，其中 n 是给定字符串的长度。我们也使用 2 个下标指针 i 和 j ，
其中 i 是当前字符串从头开始的子字符串（s ）的长度， j 是当前子字符串（s ）的拆分位置，拆分成 s (0,j) 和 s (j+1,i) 。
为了求出dp 数组，我们初始化dp[0] 为true ，这是因为空字符串总是字典的一部分。dp 数组剩余的元素都初始化为 false 。
我们用下标 i 来考虑所有从当前字符串开始的可能的子字符串。对于每一个子字符串，我们通过下标 j 将它拆分成s1 和s2 。注意 i 现在指向 s2的结尾。
为了将dp[i] 数组求出来，我们依次检查每个dp[j] 是否为true ，也就是子字符串s1 是否满足题目要求。如果满足，我们接下来检查 s2是否在字典中。
如果包含，我们接下来检查s2 是否在字典中，如果两个字符串都满足要求，我们让dp[i] 为true ，否则令其为false 。
public class Solution {
    public boolean wordBreak(String s, List<String> wordDict) {
        Set<String> wordDictSet=new HashSet(wordDict);
        boolean[] dp = new boolean[s.length() + 1];
        dp[0] = true;
        for (int i = 1; i <= s.length(); i++) {
            for (int j = 0; j < i; j++) {
                if (dp[j] && wordDictSet.contains(s.substring(j, i))) {
                    dp[i] = true;
                    break;
                }
            }
        }
        return dp[s.length()];
    }
}