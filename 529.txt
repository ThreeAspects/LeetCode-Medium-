class Solution {
    int[][] weiyi={{-1,1},{-1,0},{-1,-1},{0,1},{0,-1},{1,1},{1,0},{1,-1}};
    public char[][] updateBoard(char[][] board, int[] click) {
        int row=board.length,col=board[0].length;
        int[][] used=new int[row][col];
        Queue<Integer> queue=new LinkedList<>();
        queue.offer(click[0]*51+click[1]);
        while(!queue.isEmpty()){
            int x=queue.peek()/51;
            int y=queue.poll()%51;
            if(used[x][y]==-1){
                continue;
            }
            if(board[x][y]=='M'){
                board[x][y]='X';
                return board;
            }else if(board[x][y]=='E'){
                int count=0;
                for(int i=0;i<8;i++){
                    int m=weiyi[i][0]+x;
                    int n=weiyi[i][1]+y;
                    if(m<0||m>=row||n<0||n>=col||used[m][n]==-1){
                        continue;
                    }
                    if(board[m][n]=='M'){
                        count++;
                    }
                }
                if(count==0){
                    board[x][y]='B';
                    for(int i=0;i<8;i++){
                        int m=weiyi[i][0]+x;
                        int n=weiyi[i][1]+y;
                        if(m<0||m>=row||n<0||n>=col||used[m][n]==-1){
                            continue;
                        }
                        queue.offer(m*51+n);
                    }
                }else{
                    board[x][y]=(char)('0'+count);
                }
            }
        }
        return board;
    }
}