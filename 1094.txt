class Solution {
    class My{
        int destination,people;
        public My(int destination,int people){
            this.destination=destination;
            this.people=people;
        }
    }
    public boolean carPooling(int[][] trips, int capacity) {
        if(trips.length==0) return true;
        if(trips[0][0]>capacity) return false;
        PriorityQueue<My> heap=new PriorityQueue<>(
            (m1,m2)->m1.destination-m2.destination
        );
        Arrays.sort(trips,(t1,t2)->t1[1]-t2[1]);
        capacity-=trips[0][0];
        heap.add(new My(trips[0][2],trips[0][0]));
        for(int i=1;i<trips.length;i++){
            if(trips[i][1]<heap.peek().destination){
                if(trips[i][0]>capacity) return false;
                capacity-=trips[i][0];
                heap.add(new My(trips[i][2],trips[i][0]));
            }else{
                while(heap.size()>0&&trips[i][1]>=heap.peek().destination){
                    capacity+=heap.poll().people;
                }
                if(trips[i][0]>capacity) return false;
                capacity-=trips[i][0];
                heap.add(new My(trips[i][2],trips[i][0]));
            }
        }
        return true;
    }
}