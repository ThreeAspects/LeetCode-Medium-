令FBT(N)作为所有含N个结点的可能的满二叉树的列表。
每个满二叉树T含有 3 个或更多结点，在其根结点处有 2 个子结点。这些子结点 left 和 right 本身就是满二叉树。
因此，对于N≥3，我们可以设定如下的递归策略:FBT(N) =FBT(N)= [对于所有的x，所有的树的左子结点来自FBT(x) 而右子结点来自FBT(N−1−x)]。
此外，通过简单的计数参数，没有满二叉树具有正偶数个结点。
最后，我们应该缓存函数FBT之前的结果，这样我们就不必在递归中重新计算它们。
class Solution {
    Map<Integer, List<TreeNode>> memo = new HashMap();
    public List<TreeNode> allPossibleFBT(int N) {
        if (!memo.containsKey(N)) {
            List<TreeNode> ans = new LinkedList();
            if (N == 1) {
                ans.add(new TreeNode(0));
            } else if (N % 2 == 1) {
                for (int x = 0; x < N; ++x) {
                    int y = N - 1 - x;
                    for (TreeNode left: allPossibleFBT(x))
                        for (TreeNode right: allPossibleFBT(y)) {
                            TreeNode bns = new TreeNode(0);
                            bns.left = left;
                            bns.right = right;
                            ans.add(bns);
                        }
                }
            }
            memo.put(N, ans);
        }
        return memo.get(N);
    }
}