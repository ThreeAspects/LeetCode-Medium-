中序遍历一棵二叉搜索树的结果是得到一个升序序列。
这个方法模拟了二叉搜索树的构造过程，因为我们已经获得有序的链表，所以自然的产生了这样的想法。
在描述算法之前，先看一下中序遍历是如何获得有序值的。
基于解决这个问题的中序遍历的思想：
我们知道中序遍历最左边的元素一定是给定链表的头部，类似地下一个元素一定是链表的下一个元素，以此类推。这是肯定的因为给定的初始链表保证了升序排列。
算法
首先用伪代码来理解一下算法。
➔ function formBst(start, end)
➔      mid = (start + end) / 2
➔      formBst(start, mid - 1)
➔      TreeNode(head.val)
➔      head = head.next
➔      formBst(mid + 1, end)
遍历整个链表获得它的长度，我们用两个指针标记结果数组的开始和结束，记为 start 和 end，他们的初始值分别为0和length-1。
记住，我们当前需要模拟中序遍历，找到中间元素(start + end)/2。
注意这里并不需要在链表中找到确定的元素是哪个，只需要用一个变量告诉我们中间元素的下标。
我们只需要递归调用这两侧。
递归左半边，其中开始和结束的值分别为start,mid-1。
在这个算法中，每当我们构建完二叉搜索树的左半部分时，链表中的头指针将指向根节点或中间节点（它成为根节点）。 
因此，我们只需使用头指针指向的当前值作为根节点，并将指针后移一位，即 head = head.next。
我们在递归右半部分mid+1,end。
/**
 * Definition for singly-linked list.
 * public class ListNode{
 *     int val;
 *     ListNode next;
 *     ListNode(int x){val=x;}
 * }
 */
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) {val=x;}
 * }
 */
class Solution {
    private ListNode head;
    private int findSize(ListNode head) {
    ListNode ptr = head;
    int c = 0;
    while (ptr != null) {
      ptr = ptr.next;  
      c += 1;
    }
    return c;
  }
  private TreeNode convertListToBST(int l, int r) {
    if (l > r) {
      return null;
    }
    int mid=(l + r)/2;
    TreeNode left = this.convertListToBST(l, mid - 1);
    TreeNode node = new TreeNode(this.head.val);
    node.left = left;
    this.head = this.head.next;
    node.right = this.convertListToBST(mid + 1, r);
    return node;
  }
  public TreeNode sortedListToBST(ListNode head) {
    int size = this.findSize(head);
    this.head = head;
    return convertListToBST(0, size - 1);
  }
}