采用哈希表
算法
这种方法背后的想法如下：如果累积总和（由sum[i]表示加到 i^{th}的和）最多两个指数是相同的，那么这些元素之间的元素总和为零。
进一步扩展相同的想法，如果累计总和，在索引 i 和 j 处相差 k，即 sum[i] - sum[j] = k，则位于索引 i 和 j 之间的元素之和是 k。
基于这些想法，可以使用了一个哈希表 map，它用于存储所有可能的索引的累积总和以及相同累加和发生的次数。
我们以以下形式存储数据：(sum_i，sum_i的出现次数)。
我们遍历数组nums并继续寻找累积总和。每当我们遇到一个新的和时，我们在hashmap中创建一个与该总和相对应的新条目。如果再次出现相同的和，
我们增加与map中的和相对应的计数。此外，对于遇到的每个总和，我们还确定已经发生 sum-k总和的次数，
因为它将确定具有总和 k的子阵列发生到当前索引的次数。我们将 count增加相同的量。
在完成便利数组后，count记录了所需结果

public class Solution {
    public int subarraySum(int[] nums, int k) {
        int count = 0, sum = 0;
        HashMap < Integer, Integer > map = new HashMap < > ();
        map.put(0, 1);
        for (int i = 0; i < nums.length; i++) {
            sum += nums[i];
            if (map.containsKey(sum - k))
                count += map.get(sum - k);
            map.put(sum, map.getOrDefault(sum, 0) + 1);
        }
        return count;
    }
}