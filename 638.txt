class Solution {
    int min=Integer.MAX_VALUE;
    public int shoppingOffers(List<Integer> price, List<List<Integer>> special, List<Integer> needs) {
        int sum=0;
        for(int i=0;i<price.size();i++){
            sum+=price.get(i)*needs.get(i);
        }
        dfs(price,special,needs,0,0);
        return Math.min(sum,min);
    }
    public void dfs(List<Integer> price,List<List<Integer>> special, List<Integer> needs,int index,int sum){
        if(index>special.size()) return;
        for(int i:needs){
            if(i<0){
                sum-=special.get(index-1).get(price.size());
                for(int j=0;j<needs.size();j++){
                    sum+=price.get(j)*(needs.get(j)+special.get(index-1).get(j));
                }
                min=Math.min(sum,min);
                return;
            }
        }
        for(int i=0;i<special.size();i++){
            for(int j=0;j<needs.size();j++){
                needs.set(j,needs.get(j)-special.get(i).get(j));
            }
            dfs(price,special,needs,i+1,sum+special.get(i).get(price.size()));
            for(int j=0;j<needs.size();j++){
                needs.set(j,needs.get(j)+special.get(i).get(j));
            }
        }
    }
}
