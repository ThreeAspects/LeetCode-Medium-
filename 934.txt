搜索
分析
我们使用的方法非常直接：首先找到这两座岛，随后选择一座，将它不断向外延伸一圈，直到到达了另一座岛。
在寻找这两座岛时，我们使用深度优先搜索。在向外延伸时，我们使用广度优先搜索。
算法
我们通过对数组 A 中的 1 进行深度优先搜索，可以得到两座岛的位置集合，分别为 source 和 target。
随后我们从 source 中的所有位置开始进行广度优先搜索，当它们到达了 target 中的任意一个位置时，搜索的层数就是答案。

class Solution {
    public int shortestBridge(int[][] A) {
        int R = A.length, C = A[0].length;
        int[][] colors = getComponents(A);
        Queue<Node> queue = new LinkedList();
        Set<Integer> target = new HashSet();
        for (int r = 0; r < R; ++r)
            for (int c = 0; c < C; ++c) {
                if (colors[r][c] == 1) {
                    queue.add(new Node(r, c, 0));
                } else if (colors[r][c] == 2) {
                    target.add(r * C + c);
                }
            }
        while (!queue.isEmpty()) {
            Node node = queue.poll();
            if (target.contains(node.r * C + node.c))
                return node.depth - 1;
            for (int nei: neighbors(A, node.r, node.c)) {
                int nr = nei / C, nc = nei % C;
                if (colors[nr][nc] != 1) {
                    queue.add(new Node(nr, nc, node.depth + 1));
                    colors[nr][nc] = 1;
                }
            }
        }
        throw null;
    }
    public int[][] getComponents(int[][] A) {
        int R = A.length, C = A[0].length;
        int[][] colors = new int[R][C];
        int t = 0;
        for (int r0 = 0; r0 < R; ++r0)
            for (int c0 = 0; c0 < C; ++c0)
                if (colors[r0][c0] == 0 && A[r0][c0] == 1) {
                    // Start dfs
                    Stack<Integer> stack = new Stack();
                    stack.push(r0 * C + c0);
                    colors[r0][c0] = ++t;
                    while (!stack.isEmpty()) {
                        int node = stack.pop();
                        int r = node / C, c = node % C;
                        for (int nei: neighbors(A, r, c)) {
                            int nr = nei / C, nc = nei % C;
                            if (A[nr][nc] == 1 && colors[nr][nc] == 0) {
                                colors[nr][nc] = t;
                                stack.push(nr * C + nc);
                            }
                        }
                    }
                }

        return colors;
    }
    public List<Integer> neighbors(int[][] A, int r, int c) {
        int R = A.length, C = A[0].length;
        List<Integer> ans = new ArrayList();
        if (0 <= r-1) ans.add((r-1) * R + c);
        if (0 <= c-1) ans.add(r * R + (c-1));
        if (r+1 < R) ans.add((r+1) * R + c);
        if (c+1 < C) ans.add(r * R + (c+1));
        return ans;
    }
}
class Node {
    int r, c, depth;
    Node(int r, int c, int d) {
        this.r = r;
        this.c = c;
        depth = d;
    }
}

首先找到A中的第一个1，表示这是第一个小岛的一个位置，然后在该坐标进行DFS搜索该岛的所有边缘坐标，遍历过程中，如果A[x][y] == 0，
表示该点是边缘，标注A[x][y] = 2表示步长，然后加入边缘队列；如果A[x][y] == 1，表示还在岛内，标注为-1以和另一座岛作区分。
对队列中的边缘坐标做BFS运算，i,j为队列中取出的边缘坐标，A[i][j]记录步长，如果下一个结点为1，表示已经找到了最短的路径，
返回A[i][j] - 1(我们是从2开始记录步长的)，如果是0，A[x][y] = A[i][j] + 1表示该位置的步长。
算法复杂度应该为O(M x N).
class Solution {
    private Queue<int[]> edge;
    final int[][] dxy = {{1,0},{0,1},{-1,0},{0,-1}};
    
    public int shortestBridge(int[][] A) {
        if(A.length == 0) return -1;
        edge = new LinkedList<>();
        int m = A[0].length;
        int n = A.length;
        firstLoop:
        for(int i = 0; i < n; i ++){
            for(int j = 0; j < m; j ++){
                if(A[i][j] == 1){
                    findEdge(i, j, A);
                    break firstLoop;
                }
            }
        }
        while(true){
            if(edge.isEmpty()) return -1;
            int[] edgePos = edge.poll();
            int i = edgePos[0];
            int j = edgePos[1];
            for(int k = 0; k < 4; k ++){
                int x = i + dxy[k][0];
                int y = j + dxy[k][1];
                if(x < 0 || y < 0 || x >= n || y >= n) continue;
                if(A[x][y] == 1) {
                    return A[i][j] - 1;
                }if(A[x][y] == 0){
                    A[x][y] = A[i][j] + 1;
                    edge.add(new int[]{x, y});
                }
            }
        }
        
    }
    private void findEdge(int i, int j, int[][] A){
        A[i][j] = -1;
        for(int k = 0; k < 4; k ++){
            int x = i + dxy[k][0];
            int y = j + dxy[k][1];
            if(x < 0 || y < 0 || x >= A.length || y >= A[0].length)
                continue;
            if(A[x][y] == 0) {
                A[x][y] = 2;
                edge.add(new int[]{x, y});
            }
            else if(A[x][y] == 1) findEdge(x, y, A);
        }
    }
}
